{"ast":null,"code":"var _jsxFileName = \"/Users/gus/Documents/work_in_progress/gusbook/client/src/components/Thread.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { getPosts } from \"../actions/post.actions\";\nimport { isEmpty } from \"../Util/functions\";\nimport Card from \"../components/Post/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Thread = () => {\n  _s();\n\n  const [loadPost, setLoadPost] = useState(true);\n  const [count, SetCount] = useState(5);\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.postReducer);\n\n  const loadMore = () => {\n    if (window.innerHeight + document.documentElement.scrollTop + 1 > document.scrollingElement.scrollHeight) {\n      setLoadPost(true);\n    }\n  };\n\n  useEffect(() => {\n    if (loadPost) {\n      dispatch(getPosts(count));\n      setLoadPost(false);\n      setGetPosts(count + 5);\n    }\n\n    window.addEventListener(\"scroll\", laodMore);\n    return () => window.removeEventListener(\"scroll\", loadMore);\n  }, [loadPost, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thread-container\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: !isEmpty(posts[0]) && posts.map(post => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          post: post\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Thread, \"/UYyl2DkBFrjHUTeEqiK18fsJAg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Thread;\nexport default Thread;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thread\");","map":{"version":3,"sources":["/Users/gus/Documents/work_in_progress/gusbook/client/src/components/Thread.js"],"names":["React","useEffect","useState","useSelector","useDispatch","getPosts","isEmpty","Card","Thread","loadPost","setLoadPost","count","SetCount","dispatch","posts","state","postReducer","loadMore","window","innerHeight","document","documentElement","scrollTop","scrollingElement","scrollHeight","setGetPosts","addEventListener","laodMore","removeEventListener","map","post","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAMW,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,KAAK,GAAGX,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACC,WAAlB,CAAzB;;AAEA,QAAMC,QAAQ,GAAG,MAAM;AACrB,QACEC,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,GAA0D,CAA1D,GACAF,QAAQ,CAACG,gBAAT,CAA0BC,YAF5B,EAGE;AACAd,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,GAPD;;AASAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,QAAJ,EAAc;AACZI,MAAAA,QAAQ,CAACR,QAAQ,CAACM,KAAD,CAAT,CAAR;AACAD,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAe,MAAAA,WAAW,CAACd,KAAK,GAAG,CAAT,CAAX;AACD;;AAEDO,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCC,QAAlC;AACA,WAAO,MAAMT,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCX,QAArC,CAAb;AACD,GATQ,EASN,CAACR,QAAD,EAAWI,QAAX,CATM,CAAT;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,2BACE;AAAA,gBACG,CAACP,OAAO,CAACQ,KAAK,CAAC,CAAD,CAAN,CAAR,IACCA,KAAK,CAACe,GAAN,CAAWC,IAAD,IAAU;AAClB,4BAAO,QAAC,IAAD;AAAM,UAAA,IAAI,EAAEA;AAAZ,WAAuBA,IAAI,CAACC,EAA5B;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFD;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CApCD;;GAAMvB,M;UAGaJ,W,EACHD,W;;;KAJVK,M;AAsCN,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { getPosts } from \"../actions/post.actions\";\nimport { isEmpty } from \"../Util/functions\";\nimport Card from \"../components/Post/Card\";\n\nconst Thread = () => {\n  const [loadPost, setLoadPost] = useState(true);\n  const [count, SetCount] = useState(5);\n  const dispatch = useDispatch();\n  const posts = useSelector((state) => state.postReducer);\n\n  const loadMore = () => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop + 1 >\n      document.scrollingElement.scrollHeight\n    ) {\n      setLoadPost(true);\n    }\n  };\n\n  useEffect(() => {\n    if (loadPost) {\n      dispatch(getPosts(count));\n      setLoadPost(false);\n      setGetPosts(count + 5);\n    }\n\n    window.addEventListener(\"scroll\", laodMore);\n    return () => window.removeEventListener(\"scroll\", loadMore);\n  }, [loadPost, dispatch]);\n\n  return (\n    <div className=\"thread-container\">\n      <ul>\n        {!isEmpty(posts[0]) &&\n          posts.map((post) => {\n            return <Card post={post} key={post.id} />;\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Thread;\n"]},"metadata":{},"sourceType":"module"}