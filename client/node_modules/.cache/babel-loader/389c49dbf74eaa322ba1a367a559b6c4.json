{"ast":null,"code":"import { GET_POSTS, LIKE_POST, UNLIKE_POST, UPDATE_POST, DELETE_POST, EDIT_COMMENT, DELETE_COMMENT } from \"../actions/post.actions\";\nconst initialState = {};\nexport default function postReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n      return action.playload;\n\n    case LIKE_POST:\n      return state.map(post => {\n        if (post._id === action.playload.postId) {\n          return { ...post,\n            likers: [action.playload.userId, ...post.likers]\n          };\n        }\n\n        return post;\n      });\n\n    case UNLIKE_POST:\n      return state.map(post => {\n        if (post._id === action.playload.postId) {\n          return { ...post,\n            likers: post.likers.filter(id => id !== action.playload.userId)\n          };\n        }\n\n        return post;\n      });\n\n    case UPDATE_POST:\n      return state.map(post => {\n        if (post._id === action.playload.postId) {\n          return { ...post,\n            message: action.playload.message\n          };\n        }\n\n        return post;\n      });\n\n    case DELETE_POST:\n      return state.filter(post => post._id !== action.playload.postId);\n\n    case EDIT_COMMENT:\n      return state.map(post => {\n        if (post._id === action.playload.postId) {\n          return { ...post,\n            comments: post.comments.map(comment => {\n              if (comment._id === action.playload.commentId) {\n                return { ...comment,\n                  text: action.playload.text\n                };\n              } else return comment;\n            })\n          };\n        } else return post;\n      });\n\n    case DELETE_COMMENT:\n      return state.map(post => {\n        if (post._id === action.playload.postId) {\n          return { ...post,\n            comments: post.comments.filter(comment => {\n              comment._id !== action.playload.comment;\n            })\n          };\n        }\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/gus/Documents/work_in_progress/gusbook/client/src/reducers/post.reducer.js"],"names":["GET_POSTS","LIKE_POST","UNLIKE_POST","UPDATE_POST","DELETE_POST","EDIT_COMMENT","DELETE_COMMENT","initialState","postReducer","state","action","type","playload","map","post","_id","postId","likers","userId","filter","id","message","comments","comment","commentId","text"],"mappings":"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","sourcesContent":["import {\n  GET_POSTS,\n  LIKE_POST,\n  UNLIKE_POST,\n  UPDATE_POST,\n  DELETE_POST,\n  EDIT_COMMENT,\n  DELETE_COMMENT,\n} from \"../actions/post.actions\";\n\nconst initialState = {};\n\nexport default function postReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n      return action.playload;\n    case LIKE_POST:\n      return state.map((post) => {\n        if (post._id === action.playload.postId) {\n          return {\n            ...post,\n            likers: [action.playload.userId, ...post.likers],\n          };\n        }\n        return post;\n      });\n    case UNLIKE_POST:\n      return state.map((post) => {\n        if (post._id === action.playload.postId) {\n          return {\n            ...post,\n            likers: post.likers.filter((id) => id !== action.playload.userId),\n          };\n        }\n        return post;\n      });\n    case UPDATE_POST:\n      return state.map((post) => {\n        if (post._id === action.playload.postId) {\n          return { ...post, message: action.playload.message };\n        }\n        return post;\n      });\n    case DELETE_POST:\n      return state.filter((post) => post._id !== action.playload.postId);\n    case EDIT_COMMENT:\n      return state.map((post) => {\n        if (post._id === action.playload.postId) {\n          return {\n            ...post,\n            comments: post.comments.map((comment) => {\n              if (comment._id === action.playload.commentId) {\n                return {\n                  ...comment,\n                  text: action.playload.text,\n                };\n              } else return comment;\n            }),\n          };\n        } else return post;\n      });\n    case DELETE_COMMENT:\n      return state.map((post) => {\n        if (post._id === action.playload.postId) {\n          return {\n            ...post,\n            comments: post.comments.filter((comment) => {\n              comment._id !== action.playload.comment;\n            }),\n          };\n        }\n      });\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}