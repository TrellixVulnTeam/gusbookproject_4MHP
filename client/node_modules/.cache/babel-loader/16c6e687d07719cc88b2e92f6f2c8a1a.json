{"ast":null,"code":"var _jsxFileName = \"/Users/gus/Documents/work_in_progress/gusbook/client/src/components/Thread.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { getPosts } from \"../actions/post.actions\";\nimport { isEmpty } from \"../Util/functions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Thread = () => {\n  _s();\n\n  const [loadPost, setLoadPost] = useState(true);\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.postReducer);\n  useEffect(() => {\n    if (loadPost) {\n      dispatch(getPosts());\n      setLoadPost(false);\n    }\n  }, [loadPost]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thread-container\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: !isEmpty(posts[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Thread, \"xR56a4u0tpvt0ZHM6mvmQltsJAM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Thread;\nexport default Thread;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thread\");","map":{"version":3,"sources":["/Users/gus/Documents/work_in_progress/gusbook/client/src/components/Thread.js"],"names":["React","useEffect","useState","useSelector","useDispatch","getPosts","isEmpty","Thread","loadPost","setLoadPost","dispatch","posts","state","postReducer"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAMQ,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,KAAK,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,WAAlB,CAAzB;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,QAAJ,EAAc;AACZE,MAAAA,QAAQ,CAACL,QAAQ,EAAT,CAAR;AACAI,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GALQ,EAKN,CAACD,QAAD,CALM,CAAT;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,2BACE;AAAA,gBAAK,CAACF,OAAO,CAACK,KAAK,CAAC,CAAD,CAAN;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjBD;;GAAMJ,M;UAEaH,W,EACHD,W;;;KAHVI,M;AAmBN,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { getPosts } from \"../actions/post.actions\";\nimport { isEmpty } from \"../Util/functions\";\n\nconst Thread = () => {\n  const [loadPost, setLoadPost] = useState(true);\n  const dispatch = useDispatch();\n  const posts = useSelector((state) => state.postReducer);\n\n  useEffect(() => {\n    if (loadPost) {\n      dispatch(getPosts());\n      setLoadPost(false);\n    }\n  }, [loadPost]);\n\n  return (\n    <div className=\"thread-container\">\n      <ul>{!isEmpty(posts[0])}</ul>\n    </div>\n  );\n};\n\nexport default Thread;\n"]},"metadata":{},"sourceType":"module"}